<?xml version="1.0"?>

<project name="ng" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" default="compile">
	<description>This build file describes a set of classpaths and targets "exported"
    from this project, and common properties</description>

	<property file="property-file.${config}" />
	
	<dirname property="ng.directory" file="${ant.file.ng}"/>
	<property name="lib.dir" value="${ng.directory}/WebContent/WEB-INF/lib" />
	<property name="lib-compiletime.dir" value="${ng.directory}/lib-compiletime" />


	<!-- Paths/Properties -->
	<property name="build.dir" value="ant-build" />
	<property name="dist.dir" value="${build.dir}/dist" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="test-classes.dir" value="${build.dir}/test-classes" />




	<path id="aspectj-tools-classpath">
		<pathelement location="${imported.basedir.libs}/lib/com.springsource.org.aspectj.weaver-1.6.5.RELEASE.jar"/>
		<pathelement location="${imported.basedir.libs}/lib/com.springsource.org.aspectj.runtime-1.6.5.RELEASE.jar"/>
		<pathelement location="${imported.basedir.libs}/lib/com.springsource.org.aspectj.tools-1.6.5.RELEASE.jar"/>
	</path>


	<!-- Classpaths -->
	<path id="aspect.path">
		<pathelement location="${imported.basedir.libs}/lib/*.jar"/>
	</path>


	<!-- General targets -->



	<target name="clean-all">
		<echo message="Deleting ${lib-dir}/*.jar"/>
		<echo message="Deleting ${lib-dir}/license-*.txt"/>
		<delete>
			<fileset dir="${lib-dir}">
				<include name="*.jar"/>
				<include name="license-*.txt"/>
				<include name="ivy.timestamp.txt"/>
			</fileset>
		</delete>
		<clean-target project="access" topdir="${imported.basedir.libs}/../genedb-access"/>
		<clean-target project="db" topdir="${imported.basedir.libs}/../genedb-db"/>
		<clean-target project="domain" topdir="${imported.basedir.libs}/../genedb-domain"/>
		<clean-target project="query" topdir="${imported.basedir.libs}/../genedb-query"/>
		<clean-target project="util" topdir="${imported.basedir.libs}/../genedb-util"/>
		<clean-target project="web" topdir="${imported.basedir.libs}/../genedb-web"/>
		<clean-target project="Jogra" topdir="${imported.basedir.libs}/../Jogra"/>
		<clean-target project="Medusa" topdir="${imported.basedir.libs}/../Medusa"/>
	</target>




	<!-- Macro definitions -->

	<macrodef name="init-target" description="Create initial build structure">
		<attribute name="project" />
		<attribute name="topdir" default="${imported.basedir.@{project}}"/>
		<sequential>
			<mkdir dir="@{topdir}/${build.dir}" />
			<mkdir dir="@{topdir}/${dist.dir}" />
			<mkdir dir="@{topdir}/${classes.dir}" />
			<mkdir dir="@{topdir}/${test-classes.dir}" />
			<mkdir dir="@{topdir}/${lib.dir}" />
			<available property="@{project}.ivy-timestamp-exists" file="@{topdir}/${lib.dir}/ivy.timestamp.txt" />
		</sequential>
	</macrodef>

	<macrodef name="clean-target" description="Remove all build artifacts">
		<attribute name="project" />
		<attribute name="topdir" default="${imported.basedir.@{project}}"/>
		<sequential>
			<delete dir="@{topdir}/${build.dir}" includeEmptyDirs="true" />
			<delete dir="@{topdir}/${lib.dir}" includeEmptyDirs="true" />
			<delete dir="@{topdir}/${test-classes.dir}"/>
		</sequential>
	</macrodef>


	<macrodef name="compile-target" description="Compile a module">
		<attribute name="project" />
		<attribute name="topdir" default="${imported.basedir.@{project}}"/>
		<attribute name="classpathref" default="@{project}-classpath"/>
		<sequential>
			<!-- <echo message="genedb-libs.compile-target: src.dir is '@{topdir}/src', output is '@{topdir}/${classes.dir}', classpathref is '@{classpathref}'" /> -->
			<javac srcdir="@{topdir}/src" includes="**/*.java" debug="true" source="1.6" target="1.6"
             destdir="@{topdir}/${classes.dir}" classpathref="@{classpathref}" />
			<!-- <echo>Compile finished</echo> -->
		</sequential>
	</macrodef>

	<macrodef name="tests-target" description="Test a module">
		<attribute name="project" />
		<attribute name="topdir" default="${imported.basedir.@{project}}"/>
		<attribute name="classpathref" default="@{project}-tests-classpath"/>
		<sequential>
			<javac srcdir="@{topdir}/test" includes="**/*.java" debug="true"
                 destdir="@{topdir}/${test-classes.dir}"
                 classpathref="@{classpathref}" />

			<junit printsummary="on"
        fork="false"
        haltonfailure="false"
        failureproperty="tests.failed"
        showoutput="true">
				<classpath refid="@{classpathref}"/>
				<formatter type="brief" usefile="false"/>
				<batchtest>
					<fileset dir="@{topdir}/${test-classes.dir}">
						<include name="**/*Test.*"/>
					</fileset>
				</batchtest>
			</junit>
			<fail if="tests.failed">
            tests.failed=${tests.failed}
            ***********************************************************
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
            ***********************************************************
      </fail>
		</sequential>
	</macrodef>

	<macrodef name="compile-and-iajc-target" description="Compile and weave a module">
		<attribute name="project" />
		<attribute name="topdir" default="${imported.basedir.@{project}}"/>
		<attribute name="classpathref" default="@{project}-classpath"/>
		<sequential>
			<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
				<classpath refid="aspectj-tools-classpath"/>
			</taskdef>
			<iajc
        sourceRoots="@{topdir}/src"
        source="1.6"
        target="1.6"
        verbose="true"
        destDir="@{topdir}/${classes.dir}"
        classpathref="@{classpathref}" />
		</sequential>
	</macrodef>

	<macrodef name="iajc-target" description="Compile-time aspectj weaving">
		<attribute name="project" />
		<attribute name="directory" default="${imported.basedir.@{project}}/${classes.dir}"/>
		<attribute name="from-directory" default="@{directory}"/>
		<attribute name="to-directory" default="@{directory}"/>
		<attribute name="classpathref" default="@{project}-classpath"/>
		<sequential>
			<antcall target="lib-populate-lib-dir" />
			<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
				<classpath refid="aspectj-tools-classpath"/>
			</taskdef>
			<iajc
        verbose="false" nowarn="true"
        inpath="@{from-directory}"
        aspectpathref="@{classpathref}"
        classpathRef ="@{classpathref}"
        destdir="@{to-directory}" maxmem="1024M" fork="true">

				<forkclasspath refid="aspectj-tools-classpath"/>
			</iajc>
		</sequential>
	</macrodef>

	<macrodef name="jar-target" description="Make a distribution JAR">
		<attribute name="project" />
		<attribute name="topdir" default="${imported.basedir.@{project}}"/>
		<attribute name="jar" default="genedb-@{project}.jar" />
		<element name="extra-elements" optional="true" implicit="true"/>
		<sequential>
			<delete file="@{topdir}/${dist.dir}/@{jar}" />
			<jar jarfile="@{topdir}/${dist.dir}/@{jar}" basedir="@{topdir}/${classes.dir}"
           excludes="**/*Test.class">
				<extra-elements/>
			</jar>
		</sequential>
	</macrodef>



	  <target name="final-deploy" depends="deploy" description="Deployment step once server is shut down">
	    <echo>About to delete ${finaldest.webapps}.old</echo>
	    <delete dir="${finaldest.webapps}.old" failonerror="false"/>
	    <move file="${finaldest.webapps}" tofile="${finaldest.webapps}.old" failonerror="false" />
	    <move file="${finaldest.webapps}.tmp" tofile="${finaldest.webapps}" />
	    <delete dir="${finaldest.webapps}.old" failonerror="false"/>
	    <!-- temp hack -->
	  </target>

	  <target name="deploy" depends="check-config, compile">
	    <filter token="webAppRootKey" value="${webAppRootKey}" />
	    <delete dir="${finaldest.webapps}.tmp" failonerror="false"/>
	    <mkdir dir="${finaldest.webapps}.tmp"/>
	    <copy todir="${finaldest.webapps}.tmp">
	      <fileset dir="WebContent" casesensitive="false" followSymLinks="false" excludesfile="WebContent/WEB-INF/web.xml"/>
	    </copy>
	    <echo message="About to filter web.xml" />
	    <delete file="${finaldest.webapps}.tmp/WEB-INF/web.xml" failonerror="false" />
	    <copy file="WebContent/WEB-INF/web.xml" tofile="${finaldest.webapps}.tmp/WEB-INF/web.xml" filtering="true" />
	    <echo message="Done filtering web.xml" />
	    <copy todir="${finaldest.webapps}.tmp/WEB-INF/classes">
	      <fileset dir="ant-build/classes" casesensitive="false" followSymLinks="false" />
	    </copy>
	    <copy file="property-file.${config}" tofile="${finaldest.webapps}.tmp/WEB-INF/classes/project.properties" overwrite="true" />
	    <!--
	  	<echo message="Copying libraries"/>
	    <copy flatten="true" todir="${finaldest.webapps}.tmp/WEB-INF/lib">
	      <path refid="web-deploy-classpath" />
	    </copy>
	    -->
	  </target>



	  <target name="check-config">
	    <fail message="The 'config' property must be set" unless="config"/>
	    <available file="${ng.directory}/property-file.${config}" property="config-file-exists"/>
	    <fail message="The file ${ng.directory}/property-file.${config} does not exist" unless="config-file-exists"/>
	    <copy file="${ng.directory}/property-file.${config}" tofile="${ng.directory}/WebContent/WEB-INF/classes/project.properties" overwrite="true" />
	  </target>



	<!-- Sorted targets -->

	<target name="check.lib-uptodate" depends="init" if="libs.ivy-timestamp-exists">
		<uptodate property="lib-uptodate" srcfile="${ng.directory}/ivy.xml" targetfile="${ng.directory}/WebContent/WEB-INF/libs/ivy.timestamp.txt" />
	</target>
	
	<target name="init" description="Create initial build structure">
		    <mkdir dir="${build.dir}" />
			<mkdir dir="${dist.dir}" />
			<mkdir dir="${classes.dir}" />
			<mkdir dir="${test-classes.dir}" />
			<!-- <mkdir dir="@{topdir}/${lib.dir}" /> -->
			<available property="ivy-timestamp-exists" file="@{ng.directory}/WebContent/WEB-INF/lib/ivy.timestamp.txt" />
	</target>
	
	<target name="populate-lib-dirs" depends="check.lib-uptodate" unless="lib-uptodate">
		<ivy:settings file="${ng.directory}/ivysettings.xml" />
		<delete dir="${lib.dir}" failonerror="false" />
		<mkdir dir="${lib.dir}" />
		<property name="ivy.lib.dir"  value="${lib.dir}"/>
		<property name="ivy.dep.file" value="${ng.directory}/ivy.xml"/>
		<ivy:retrieve conf="default" />
		<touch file="${lib.dir}/ivy.timestamp.txt" />

		<move todir="${lib-compiletime.dir}">
			<fileset dir="${lib.dir}">
				<include name="com.springsource.javax.servlet-2.5.0.jar"/>
				<include name="com.springsource.javax.servlet-sources-2.5.0.jar"/>
				<include name="com.springsource.javax.servlet.jsp-2.1.0.jar"/>
				<include name="com.springsource.javax.servlet.jsp-sources-2.1.0.jar"/>
				<include name="com.springsource.javax.el-1.0.0.jar"/>
				<include name="com.springsource.javax.el-sources-1.0.0.jar"/>
			</fileset>
		</move>

		<copy todir="${lib.dir}">
			<fileset dir="lib-repos/biojava">
				<include name="biojava-1.6.jar"/>
				<include name="bytecode-0.91.jar"/>
			</fileset>
			<fileset dir="lib-repos/misc">
				<include name="displaytag-1.2.jar"/>
				<include name="jewelcli-0.53.jar"/>
			</fileset>
			<fileset dir="lib-repos/db">
				<include name="je-3.3.75.jar"/>
			</fileset>
			<fileset dir="lib-repos/json">
				<include name="ezmorph-1.0.4.jar"/>
				<include name="json-lib-2.2.1-jdk15.jar"/>
				<include name="json-lib-ext-spring-1.0.1.jar"/>
			</fileset>
		</copy>
<!--
		<delete file="${imported.basedir.web}/lib/com.springsource.com.thoughtworks.xstream-1.2.2.jar" />
		<delete file="${imported.basedir.web}/lib/com.springsource.com.thoughtworks.xstream-sources-1.2.2.jar" />
-->

	</target>

    <target name="hibernate-instrumentation">
        <!-- This task is used to instrument the Feature class to enable lazy property fetching -->
        <taskdef name="instrument"
            classname="org.hibernate.tool.instrument.javassist.InstrumentTask"
            classpathref="classpathref"/>

        <instrument verbose="false">
            <fileset dir="${classes.dir}">
                <include name="org/gmod/schema/mapped/Feature.class"/>
                <include name="org/gmod/schema/mapped/Organism.class"/>
                <include name="org/gmod/schema/feature/*.class"/>
            </fileset>
        </instrument>
    </target>

	  <target name="compile" depends="populate-lib-dirs"
	        description="--> Compile classes" >

	  	<!--
		<macrodef name="compile-target" description="Compile a module">
			<attribute name="project" />
			<attribute name="topdir" default="${imported.basedir.@{project}}"/>
			<attribute name="classpathref" default="@{project}-classpath"/>
			-->

			<!-- <echo message="genedb-libs.compile-target: src.dir is '@{topdir}/src', output is '@{topdir}/${classes.dir}', classpathref is '@{classpathref}'" /> -->
			<javac srcdir="${ng.directory}/src"
				   includes="**/*.java"
				   debug="true" source="1.6" target="1.6"
	               destdir="${classes.dir}"
				   classpathref="classpathref" />


			<!-- <echo>Compile finished</echo> -->

	      <!--
	    <copyfile dest="${imported.basedir.web}/ant-build/woven-classes/org/genedb/web/mvc/model/PopulateCaches.class"
	              src="${imported.basedir.web}/ant-build/classes/org/genedb/web/mvc/model/PopulateCaches.class" />
	    <copyfile dest="${imported.basedir.web}/ant-build/woven-classes/org/genedb/web/utils/MartinHack.class"
	              src="${imported.basedir.web}/ant-build/classes/org/genedb/web/utils/MartinHack.class" />
	    <iajc-target project="web" from-directory="${imported.basedir.web}/ant-build/woven-classes"
	                               to-directory="${imported.basedir.web}/ant-build/classes"/>
	                               -->
	    <uptodate property="web.iajc-uptodate" targetfile="${imported.basedir.web}/ant-build/iajc_run">
	      <srcfiles dir="${imported.basedir.web}/ant-build/classes" />
	    </uptodate>
	  </target>

	  <path id="classpathref">
	    <fileset dir="${ng.directory}/WebContent/WEB-INF/lib/">
	      <include name="*.jar"/>
	    </fileset>
	    <fileset dir="${ng.directory}/lib-compiletime/">
	      <include name="*.jar"/>
	    </fileset>
	  </path>

</project>
