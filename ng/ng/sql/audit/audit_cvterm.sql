-- Autogenerated on Fri May  8 09:41:59 2009 by mkaudit.pl

create table audit.cvterm (
    dbxref_id integer not null
  , cv_id integer not null
  , cvterm_id integer not null
  , name character varying(1024) not null
  , is_relationshiptype integer not null
  , is_obsolete integer not null
  , definition text
) inherits (audit.audit);

create or replace function audit.audit_cvterm_insert_proc()
returns trigger
as $$
BEGIN
  raise exception 'Cannot insert directly into audit.cvterm. Use one of the child tables.';
END;
$$ language plpgsql;
create trigger cvterm_insert_tr before insert on audit.cvterm
    for each statement execute procedure audit.audit_cvterm_insert_proc();
grant select on audit.cvterm to chado_ro_role;
grant select, insert on audit.cvterm to chado_rw_role;
grant execute on function audit.audit_cvterm_insert_proc() to chado_rw_role;


create table audit.cvterm_insert (
    constraint cvterm_insert_ck check (type = 'INSERT')
) inherits (audit.cvterm);
alter table audit.cvterm_insert alter type set default 'INSERT';
grant select on audit.cvterm_insert to chado_ro_role;
grant select, insert on audit.cvterm_insert to chado_rw_role;

create or replace function audit.public_cvterm_insert_proc()
returns trigger
as $$
BEGIN
  insert into audit.cvterm_insert (
      cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype
  ) values (
      new.cvterm_id, new.cv_id, new.name, new.definition, new.dbxref_id, new.is_obsolete, new.is_relationshiptype
  );
  return new;
END;
$$ language plpgsql;
create trigger cvterm_audit_insert_tr after insert on public.cvterm
    for each row execute procedure audit.public_cvterm_insert_proc();
grant execute on function audit.public_cvterm_insert_proc() to chado_rw_role;


create table audit.cvterm_update (
    constraint cvterm_update_ck check (type = 'UPDATE')
  , old_is_relationshiptype integer not null
  , old_definition text
  , old_is_obsolete integer not null
  , old_cv_id integer not null
  , old_dbxref_id integer not null
  , old_name character varying(1024) not null
) inherits (audit.cvterm);
alter table audit.cvterm_update alter type set default 'UPDATE';
grant select on audit.cvterm_update to chado_ro_role;
grant select, insert on audit.cvterm_update to chado_rw_role;

create or replace function audit.public_cvterm_update_proc()
returns trigger
as $$
BEGIN
  if old.cvterm_id <> new.cvterm_id or old.cvterm_id is null <> new.cvterm_id is null then
    raise exception 'If you want to change cvterm.cvterm_id (do you really?) then disable the audit trigger cvterm_audit_update_tr';
  end if;
  insert into audit.cvterm_update (
      cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype,
      old_cv_id, old_name, old_definition, old_dbxref_id, old_is_obsolete, old_is_relationshiptype
   ) values (
       new.cvterm_id, new.cv_id, new.name, new.definition, new.dbxref_id, new.is_obsolete, new.is_relationshiptype,
       old.cv_id, old.name, old.definition, old.dbxref_id, old.is_obsolete, old.is_relationshiptype
   );
  return new;
END;
$$ language plpgsql;
create trigger cvterm_audit_update_tr after update on public.cvterm
    for each row execute procedure audit.public_cvterm_update_proc();
grant execute on function audit.public_cvterm_update_proc() to chado_rw_role;


create table audit.cvterm_delete (
    constraint cvterm_delete_ck check (type = 'DELETE')
) inherits (audit.cvterm);
alter table audit.cvterm_delete alter type set default 'DELETE';
grant select on audit.cvterm_delete to chado_ro_role;
grant select, insert on audit.cvterm_delete to chado_rw_role;

create or replace function audit.public_cvterm_delete_proc()
returns trigger
as $$
BEGIN
  insert into audit.cvterm_delete (
      cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype
  ) values (
      old.cvterm_id, old.cv_id, old.name, old.definition, old.dbxref_id, old.is_obsolete, old.is_relationshiptype
  );
  return old;
END;
$$ language plpgsql;
create trigger cvterm_audit_delete_tr after delete on public.cvterm
    for each row execute procedure audit.public_cvterm_delete_proc();
grant execute on function audit.public_cvterm_delete_proc() to chado_rw_role;
