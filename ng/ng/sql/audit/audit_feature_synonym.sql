-- Autogenerated on Tue May 26 17:40:04 2009 by mkaudit.pl

create table audit.feature_synonym (
    feature_id integer not null
  , is_current boolean not null
  , pub_id integer not null
  , feature_synonym_id integer not null
  , is_internal boolean not null
  , synonym_id integer not null
) inherits (audit.audit);

create or replace function audit.audit_feature_synonym_insert_proc()
returns trigger
as $$
BEGIN
  raise exception 'Cannot insert directly into audit.feature_synonym. Use one of the child tables.';
END;
$$ language plpgsql;
create trigger feature_synonym_insert_tr before insert on audit.feature_synonym
    for each statement execute procedure audit.audit_feature_synonym_insert_proc();
grant select on audit.feature_synonym to chado_ro_role;
grant select, insert on audit.feature_synonym to chado_rw_role;
grant execute on function audit.audit_feature_synonym_insert_proc() to chado_rw_role;


create table audit.feature_synonym_insert (
    constraint feature_synonym_insert_ck check (type = 'INSERT')
) inherits (audit.feature_synonym);
alter table audit.feature_synonym_insert alter type set default 'INSERT';
grant select on audit.feature_synonym_insert to chado_ro_role;
grant select, insert on audit.feature_synonym_insert to chado_rw_role;

create or replace function audit.public_feature_synonym_insert_proc()
returns trigger
as $$
BEGIN
  insert into audit.feature_synonym_insert (
      feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal
  ) values (
      new.feature_synonym_id, new.synonym_id, new.feature_id, new.pub_id, new.is_current, new.is_internal
  );
  return new;
END;
$$ language plpgsql;
create trigger feature_synonym_audit_insert_tr after insert on public.feature_synonym
    for each row execute procedure audit.public_feature_synonym_insert_proc();
grant execute on function audit.public_feature_synonym_insert_proc() to chado_rw_role;


create table audit.feature_synonym_update (
    constraint feature_synonym_update_ck check (type = 'UPDATE')
  , old_is_internal boolean not null
  , old_is_current boolean not null
  , old_pub_id integer not null
  , old_feature_id integer not null
  , old_synonym_id integer not null
) inherits (audit.feature_synonym);
alter table audit.feature_synonym_update alter type set default 'UPDATE';
grant select on audit.feature_synonym_update to chado_ro_role;
grant select, insert on audit.feature_synonym_update to chado_rw_role;

create or replace function audit.public_feature_synonym_update_proc()
returns trigger
as $$
BEGIN
  if old.feature_synonym_id <> new.feature_synonym_id or old.feature_synonym_id is null <> new.feature_synonym_id is null then
    raise exception 'If you want to change feature_synonym.feature_synonym_id (do you really?) then disable the audit trigger feature_synonym_audit_update_tr';
  end if;
  insert into audit.feature_synonym_update (
      feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal,
      old_synonym_id, old_feature_id, old_pub_id, old_is_current, old_is_internal
   ) values (
       new.feature_synonym_id, new.synonym_id, new.feature_id, new.pub_id, new.is_current, new.is_internal,
       old.synonym_id, old.feature_id, old.pub_id, old.is_current, old.is_internal
   );
  return new;
END;
$$ language plpgsql;
create trigger feature_synonym_audit_update_tr after update on public.feature_synonym
    for each row execute procedure audit.public_feature_synonym_update_proc();
grant execute on function audit.public_feature_synonym_update_proc() to chado_rw_role;


create table audit.feature_synonym_delete (
    constraint feature_synonym_delete_ck check (type = 'DELETE')
) inherits (audit.feature_synonym);
alter table audit.feature_synonym_delete alter type set default 'DELETE';
grant select on audit.feature_synonym_delete to chado_ro_role;
grant select, insert on audit.feature_synonym_delete to chado_rw_role;

create or replace function audit.public_feature_synonym_delete_proc()
returns trigger
as $$
BEGIN
  insert into audit.feature_synonym_delete (
      feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal
  ) values (
      old.feature_synonym_id, old.synonym_id, old.feature_id, old.pub_id, old.is_current, old.is_internal
  );
  return old;
END;
$$ language plpgsql;
create trigger feature_synonym_audit_delete_tr after delete on public.feature_synonym
    for each row execute procedure audit.public_feature_synonym_delete_proc();
grant execute on function audit.public_feature_synonym_delete_proc() to chado_rw_role;
