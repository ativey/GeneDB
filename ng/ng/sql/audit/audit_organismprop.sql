-- Autogenerated on Fri May  8 09:42:01 2009 by mkaudit.pl

create table audit.organismprop (
    organismprop_id integer not null
  , value text
  , type_id integer not null
  , organism_id integer not null
  , rank integer not null
) inherits (audit.audit);

create or replace function audit.audit_organismprop_insert_proc()
returns trigger
as $$
BEGIN
  raise exception 'Cannot insert directly into audit.organismprop. Use one of the child tables.';
END;
$$ language plpgsql;
create trigger organismprop_insert_tr before insert on audit.organismprop
    for each statement execute procedure audit.audit_organismprop_insert_proc();
grant select on audit.organismprop to chado_ro_role;
grant select, insert on audit.organismprop to chado_rw_role;
grant execute on function audit.audit_organismprop_insert_proc() to chado_rw_role;


create table audit.organismprop_insert (
    constraint organismprop_insert_ck check (type = 'INSERT')
) inherits (audit.organismprop);
alter table audit.organismprop_insert alter type set default 'INSERT';
grant select on audit.organismprop_insert to chado_ro_role;
grant select, insert on audit.organismprop_insert to chado_rw_role;

create or replace function audit.public_organismprop_insert_proc()
returns trigger
as $$
BEGIN
  insert into audit.organismprop_insert (
      organismprop_id, organism_id, type_id, value, rank
  ) values (
      new.organismprop_id, new.organism_id, new.type_id, new.value, new.rank
  );
  return new;
END;
$$ language plpgsql;
create trigger organismprop_audit_insert_tr after insert on public.organismprop
    for each row execute procedure audit.public_organismprop_insert_proc();
grant execute on function audit.public_organismprop_insert_proc() to chado_rw_role;


create table audit.organismprop_update (
    constraint organismprop_update_ck check (type = 'UPDATE')
  , old_type_id integer not null
  , old_organism_id integer not null
  , old_rank integer not null
  , old_value text
) inherits (audit.organismprop);
alter table audit.organismprop_update alter type set default 'UPDATE';
grant select on audit.organismprop_update to chado_ro_role;
grant select, insert on audit.organismprop_update to chado_rw_role;

create or replace function audit.public_organismprop_update_proc()
returns trigger
as $$
BEGIN
  if old.organismprop_id <> new.organismprop_id or old.organismprop_id is null <> new.organismprop_id is null then
    raise exception 'If you want to change organismprop.organismprop_id (do you really?) then disable the audit trigger organismprop_audit_update_tr';
  end if;
  insert into audit.organismprop_update (
      organismprop_id, organism_id, type_id, value, rank,
      old_organism_id, old_type_id, old_value, old_rank
   ) values (
       new.organismprop_id, new.organism_id, new.type_id, new.value, new.rank,
       old.organism_id, old.type_id, old.value, old.rank
   );
  return new;
END;
$$ language plpgsql;
create trigger organismprop_audit_update_tr after update on public.organismprop
    for each row execute procedure audit.public_organismprop_update_proc();
grant execute on function audit.public_organismprop_update_proc() to chado_rw_role;


create table audit.organismprop_delete (
    constraint organismprop_delete_ck check (type = 'DELETE')
) inherits (audit.organismprop);
alter table audit.organismprop_delete alter type set default 'DELETE';
grant select on audit.organismprop_delete to chado_ro_role;
grant select, insert on audit.organismprop_delete to chado_rw_role;

create or replace function audit.public_organismprop_delete_proc()
returns trigger
as $$
BEGIN
  insert into audit.organismprop_delete (
      organismprop_id, organism_id, type_id, value, rank
  ) values (
      old.organismprop_id, old.organism_id, old.type_id, old.value, old.rank
  );
  return old;
END;
$$ language plpgsql;
create trigger organismprop_audit_delete_tr after delete on public.organismprop
    for each row execute procedure audit.public_organismprop_delete_proc();
grant execute on function audit.public_organismprop_delete_proc() to chado_rw_role;
