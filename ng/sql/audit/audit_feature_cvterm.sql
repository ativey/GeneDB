-- Autogenerated on Fri May  8 09:42:00 2009 by mkaudit.pl

create table audit.feature_cvterm (
    feature_id integer not null
  , pub_id integer not null
  , cvterm_id integer not null
  , feature_cvterm_id integer not null
  , is_not boolean not null
  , rank integer not null
) inherits (audit.audit);

create or replace function audit.audit_feature_cvterm_insert_proc()
returns trigger
as $$
BEGIN
  raise exception 'Cannot insert directly into audit.feature_cvterm. Use one of the child tables.';
END;
$$ language plpgsql;
create trigger feature_cvterm_insert_tr before insert on audit.feature_cvterm
    for each statement execute procedure audit.audit_feature_cvterm_insert_proc();
grant select on audit.feature_cvterm to chado_ro_role;
grant select, insert on audit.feature_cvterm to chado_rw_role;
grant execute on function audit.audit_feature_cvterm_insert_proc() to chado_rw_role;


create table audit.feature_cvterm_insert (
    constraint feature_cvterm_insert_ck check (type = 'INSERT')
) inherits (audit.feature_cvterm);
alter table audit.feature_cvterm_insert alter type set default 'INSERT';
grant select on audit.feature_cvterm_insert to chado_ro_role;
grant select, insert on audit.feature_cvterm_insert to chado_rw_role;

create or replace function audit.public_feature_cvterm_insert_proc()
returns trigger
as $$
BEGIN
  insert into audit.feature_cvterm_insert (
      feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not, rank
  ) values (
      new.feature_cvterm_id, new.feature_id, new.cvterm_id, new.pub_id, new.is_not, new.rank
  );
  return new;
END;
$$ language plpgsql;
create trigger feature_cvterm_audit_insert_tr after insert on public.feature_cvterm
    for each row execute procedure audit.public_feature_cvterm_insert_proc();
grant execute on function audit.public_feature_cvterm_insert_proc() to chado_rw_role;


create table audit.feature_cvterm_update (
    constraint feature_cvterm_update_ck check (type = 'UPDATE')
  , old_cvterm_id integer not null
  , old_rank integer not null
  , old_is_not boolean not null
  , old_pub_id integer not null
  , old_feature_id integer not null
) inherits (audit.feature_cvterm);
alter table audit.feature_cvterm_update alter type set default 'UPDATE';
grant select on audit.feature_cvterm_update to chado_ro_role;
grant select, insert on audit.feature_cvterm_update to chado_rw_role;

create or replace function audit.public_feature_cvterm_update_proc()
returns trigger
as $$
BEGIN
  if old.feature_cvterm_id <> new.feature_cvterm_id or old.feature_cvterm_id is null <> new.feature_cvterm_id is null then
    raise exception 'If you want to change feature_cvterm.feature_cvterm_id (do you really?) then disable the audit trigger feature_cvterm_audit_update_tr';
  end if;
  insert into audit.feature_cvterm_update (
      feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not, rank,
      old_feature_id, old_cvterm_id, old_pub_id, old_is_not, old_rank
   ) values (
       new.feature_cvterm_id, new.feature_id, new.cvterm_id, new.pub_id, new.is_not, new.rank,
       old.feature_id, old.cvterm_id, old.pub_id, old.is_not, old.rank
   );
  return new;
END;
$$ language plpgsql;
create trigger feature_cvterm_audit_update_tr after update on public.feature_cvterm
    for each row execute procedure audit.public_feature_cvterm_update_proc();
grant execute on function audit.public_feature_cvterm_update_proc() to chado_rw_role;


create table audit.feature_cvterm_delete (
    constraint feature_cvterm_delete_ck check (type = 'DELETE')
) inherits (audit.feature_cvterm);
alter table audit.feature_cvterm_delete alter type set default 'DELETE';
grant select on audit.feature_cvterm_delete to chado_ro_role;
grant select, insert on audit.feature_cvterm_delete to chado_rw_role;

create or replace function audit.public_feature_cvterm_delete_proc()
returns trigger
as $$
BEGIN
  insert into audit.feature_cvterm_delete (
      feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not, rank
  ) values (
      old.feature_cvterm_id, old.feature_id, old.cvterm_id, old.pub_id, old.is_not, old.rank
  );
  return old;
END;
$$ language plpgsql;
create trigger feature_cvterm_audit_delete_tr after delete on public.feature_cvterm
    for each row execute procedure audit.public_feature_cvterm_delete_proc();
grant execute on function audit.public_feature_cvterm_delete_proc() to chado_rw_role;
