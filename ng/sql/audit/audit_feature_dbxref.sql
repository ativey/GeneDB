-- Autogenerated on Fri May  8 09:42:00 2009 by mkaudit.pl

create table audit.feature_dbxref (
    dbxref_id integer not null
  , feature_id integer not null
  , feature_dbxref_id integer not null
  , is_current boolean not null
) inherits (audit.audit);

create or replace function audit.audit_feature_dbxref_insert_proc()
returns trigger
as $$
BEGIN
  raise exception 'Cannot insert directly into audit.feature_dbxref. Use one of the child tables.';
END;
$$ language plpgsql;
create trigger feature_dbxref_insert_tr before insert on audit.feature_dbxref
    for each statement execute procedure audit.audit_feature_dbxref_insert_proc();
grant select on audit.feature_dbxref to chado_ro_role;
grant select, insert on audit.feature_dbxref to chado_rw_role;
grant execute on function audit.audit_feature_dbxref_insert_proc() to chado_rw_role;


create table audit.feature_dbxref_insert (
    constraint feature_dbxref_insert_ck check (type = 'INSERT')
) inherits (audit.feature_dbxref);
alter table audit.feature_dbxref_insert alter type set default 'INSERT';
grant select on audit.feature_dbxref_insert to chado_ro_role;
grant select, insert on audit.feature_dbxref_insert to chado_rw_role;

create or replace function audit.public_feature_dbxref_insert_proc()
returns trigger
as $$
BEGIN
  insert into audit.feature_dbxref_insert (
      feature_dbxref_id, feature_id, dbxref_id, is_current
  ) values (
      new.feature_dbxref_id, new.feature_id, new.dbxref_id, new.is_current
  );
  return new;
END;
$$ language plpgsql;
create trigger feature_dbxref_audit_insert_tr after insert on public.feature_dbxref
    for each row execute procedure audit.public_feature_dbxref_insert_proc();
grant execute on function audit.public_feature_dbxref_insert_proc() to chado_rw_role;


create table audit.feature_dbxref_update (
    constraint feature_dbxref_update_ck check (type = 'UPDATE')
  , old_dbxref_id integer not null
  , old_is_current boolean not null
  , old_feature_id integer not null
) inherits (audit.feature_dbxref);
alter table audit.feature_dbxref_update alter type set default 'UPDATE';
grant select on audit.feature_dbxref_update to chado_ro_role;
grant select, insert on audit.feature_dbxref_update to chado_rw_role;

create or replace function audit.public_feature_dbxref_update_proc()
returns trigger
as $$
BEGIN
  if old.feature_dbxref_id <> new.feature_dbxref_id or old.feature_dbxref_id is null <> new.feature_dbxref_id is null then
    raise exception 'If you want to change feature_dbxref.feature_dbxref_id (do you really?) then disable the audit trigger feature_dbxref_audit_update_tr';
  end if;
  insert into audit.feature_dbxref_update (
      feature_dbxref_id, feature_id, dbxref_id, is_current,
      old_feature_id, old_dbxref_id, old_is_current
   ) values (
       new.feature_dbxref_id, new.feature_id, new.dbxref_id, new.is_current,
       old.feature_id, old.dbxref_id, old.is_current
   );
  return new;
END;
$$ language plpgsql;
create trigger feature_dbxref_audit_update_tr after update on public.feature_dbxref
    for each row execute procedure audit.public_feature_dbxref_update_proc();
grant execute on function audit.public_feature_dbxref_update_proc() to chado_rw_role;


create table audit.feature_dbxref_delete (
    constraint feature_dbxref_delete_ck check (type = 'DELETE')
) inherits (audit.feature_dbxref);
alter table audit.feature_dbxref_delete alter type set default 'DELETE';
grant select on audit.feature_dbxref_delete to chado_ro_role;
grant select, insert on audit.feature_dbxref_delete to chado_rw_role;

create or replace function audit.public_feature_dbxref_delete_proc()
returns trigger
as $$
BEGIN
  insert into audit.feature_dbxref_delete (
      feature_dbxref_id, feature_id, dbxref_id, is_current
  ) values (
      old.feature_dbxref_id, old.feature_id, old.dbxref_id, old.is_current
  );
  return old;
END;
$$ language plpgsql;
create trigger feature_dbxref_audit_delete_tr after delete on public.feature_dbxref
    for each row execute procedure audit.public_feature_dbxref_delete_proc();
grant execute on function audit.public_feature_dbxref_delete_proc() to chado_rw_role;
